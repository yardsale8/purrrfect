% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/column_maps.R
\name{col_map}
\alias{col_map}
\alias{col_map_lgl}
\alias{col_map_int}
\alias{col_map_dbl}
\alias{col_map_chr}
\alias{col_map_vec}
\title{Create a new column by applying a function each element of a \code{list} column}
\usage{
col_map(df, .f, ..., onto = .outcome, as = .outcome, .progress = FALSE)

col_map_lgl(df, .f, ..., onto = .outcome, as = .outcome, .progress = FALSE)

col_map_int(df, .f, ..., onto = .outcome, as = .outcome, .progress = FALSE)

col_map_dbl(df, .f, ..., onto = .outcome, as = .outcome, .progress = FALSE)

col_map_chr(df, .f, ..., onto = .outcome, as = .outcome, .progress = FALSE)

col_map_vec(
  df,
  .f,
  ...,
  onto = .outcome,
  as = .outcome,
  .ptype = NULL,
  .progress = FALSE
)
}
\arguments{
\item{df}{A \code{tibble} containing the target \code{list} column}

\item{.f}{The functions to be mapped onto each element of \code{col}}

\item{...}{Additional parameters passed to \code{.f}.  Use \code{...} to pass additional (constant) to \code{.f}.}

\item{as}{The name of the output column (default = .outcome)}

\item{.progress}{Whether to show a progress bar. Use TRUE to a turn on a basic progress bar, use a string to give it a name, or see \code{purrr::progress_bars} for more details.}

\item{.ptype}{If \code{NULL}, the default, the output type is the common type of the elements of the result. Otherwise, supply a "prototype" giving the desired type of output.}

\item{col}{The target \code{list} column.}
}
\value{
A copy of the original \code{tibble} with newly added column.
}
\description{
The \code{col_map} functions transform an input column by applying a function to each element of a list column and returning a tibble containing new/updated column.:w
\itemize{
\item \code{col_map()} always returns a \code{tibble} with a new/updated list column.
\item \code{col_map_lgl()}, \code{col_map_int()}, \code{col_map_dbl()} and \code{col_map_chr()} return an new column with the the indicated type (or die trying). For these functions, \code{.f} must return a length-1 vector of the appropriate type.
\item \code{col_map_vec()} simplifies to the common type of the output. It works with most types of simple vectors like Date, POSIXct, factors, etc.:w
}
}
\examples{
library(dplyr)
library(tidyr)

df <-
   tribble( ~coin, ~.trial,
           c('H', 'T'), 1:5) \%>\%
   unnest_longer(.trial)
df \%>\% glimpse


# By default, each map updates the `.outcome` column

out <- df \%>\%
  col_map(sample, size = 3, replace = TRUE,     # additional args follow function
          onto = coin) \%>\%                      # stored as default (.output)
  col_map(\(x) keep(x, is.head)) \%>\%            # updates default (.output)
  col_map_int(length)                           # updates default (.output)
out \%>\% glimpse


# Use the `onto` to specify a target other than `.outcome`
# and `as` to specify a new destination.
is.first.equal.second <- function(x) x[[1]] == x[[2]]

out <- df \%>\%
  col_map(sample, size = 3, replace = TRUE,
          onto = coin,
          as = coin.tosses,            # Stored as `coin.toss`
          ) \%>\%
  col_map_lgl(is.first.equal.second,
              onto = coin.tosses,      # pick the target column
              as = first_equal_second, # Stored in new column
              )
out \%>\% glimpse
View(out)
}
